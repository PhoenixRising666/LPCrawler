import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

public class CrawlerGUI extends javax.swing.JFrame {

	/**
	 * Creates new form CrawlerGUI
	 */
	public Crawler crawl = new Crawler();

	public CrawlerGUI() {
		initComponents();
		this.setTitle("Static Link Finder");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		URLin = new javax.swing.JTextField();
		URLLabel = new javax.swing.JLabel();
		BaseIn = new javax.swing.JTextField();
		BaseLabel = new javax.swing.JLabel();
		depthIn = new javax.swing.JTextField();
		DepthLabel = new javax.swing.JLabel();
		runButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		URLin.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				URLinActionPerformed(evt);
			}
		});

		URLLabel.setText("URL   Ex: https://www.google.com/");

		BaseIn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				BaseInActionPerformed(evt);
			}
		});

		BaseLabel.setText("Base URL Ex: google.com");

		depthIn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				depthInActionPerformed(evt);
			}
		});

		DepthLabel.setText("Depth");

		runButton.setText("Run");
		runButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				runButtonActionPerformed(evt);
			}
		});
		staticLinkTextArea = new javax.swing.JTextArea();

		staticLinkTextArea.setColumns(20);
		staticLinkTextArea.setRows(5);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(layout
				.createParallelGroup(Alignment.TRAILING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(86)
								.addGroup(
										layout.createParallelGroup(
												Alignment.LEADING)
												.addGroup(
														Alignment.TRAILING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				Alignment.LEADING)
																				.addComponent(
																						URLin,
																						GroupLayout.PREFERRED_SIZE,
																						149,
																						GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						URLLabel,
																						GroupLayout.DEFAULT_SIZE,
																						209,
																						Short.MAX_VALUE))
																.addGap(18)
																.addGroup(
																		layout.createParallelGroup(
																				Alignment.LEADING)
																				.addComponent(
																						BaseLabel,
																						GroupLayout.PREFERRED_SIZE,
																						179,
																						GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						BaseIn,
																						GroupLayout.PREFERRED_SIZE,
																						149,
																						GroupLayout.PREFERRED_SIZE))
																.addPreferredGap(
																		ComponentPlacement.RELATED)
																.addGroup(
																		layout.createParallelGroup(
																				Alignment.LEADING)
																				.addComponent(
																						DepthLabel)
																				.addComponent(
																						depthIn,
																						GroupLayout.PREFERRED_SIZE,
																						42,
																						GroupLayout.PREFERRED_SIZE))
																.addGap(384))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		staticLinkTextArea,
																		GroupLayout.PREFERRED_SIZE,
																		448,
																		GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		ComponentPlacement.RELATED)
																.addComponent(
																		jScrollPane1,
																		GroupLayout.PREFERRED_SIZE,
																		GroupLayout.DEFAULT_SIZE,
																		GroupLayout.PREFERRED_SIZE))))
				.addGroup(
						Alignment.LEADING,
						layout.createSequentialGroup().addGap(293)
								.addComponent(runButton)
								.addContainerGap(580, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout
				.createParallelGroup(Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(44)
								.addGroup(
										layout.createParallelGroup(
												Alignment.BASELINE)
												.addComponent(URLLabel)
												.addComponent(BaseLabel)
												.addComponent(DepthLabel))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												Alignment.BASELINE)
												.addComponent(
														URLin,
														GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE,
														GroupLayout.PREFERRED_SIZE)
												.addComponent(
														BaseIn,
														GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE,
														GroupLayout.PREFERRED_SIZE)
												.addComponent(
														depthIn,
														GroupLayout.PREFERRED_SIZE,
														GroupLayout.DEFAULT_SIZE,
														GroupLayout.PREFERRED_SIZE))
								.addGap(48)
								.addComponent(runButton)
								.addGap(57)
								.addGroup(
										layout.createParallelGroup(
												Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														GroupLayout.PREFERRED_SIZE,
														190,
														GroupLayout.PREFERRED_SIZE)
												.addComponent(
														staticLinkTextArea,
														GroupLayout.PREFERRED_SIZE,
														246,
														GroupLayout.PREFERRED_SIZE))
								.addContainerGap(27, Short.MAX_VALUE)));
		getContentPane().setLayout(layout);

		pack();

		menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		mnNewMenu = new JMenu("Help ");
		menuBar.add(mnNewMenu);

		mntmHelp = new JMenuItem(
				"Help (Not implemented yet contact mlemke@liveperson.com)");
		mnNewMenu.add(mntmHelp);
	}// </editor-fold>

	private void URLinActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void BaseInActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void depthInActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {

		// Warns user of wait times
		staticLinkTextArea
				.append("Building Site Map (this can take a while depending on depth) \n");

		// sends the base urls and requested depth
		// crawl.CrawlerInit(URLin.getText(),
		// BaseIn.getText(),Integer.parseInt(depthIn.getText()), maxReached);

		// this is test crawl launcher
		crawl.CrawlerInit("http://pioneerdoctor.com/", "pioneerdoctor.com", 0);

		// launches crawler as a thread searches results upon completion
		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				crawl.runCrawler();
				/*
				 * new Thread(new Runnable() { public void run() { int
				 * current=0;
				 * while(maxReached.getDepth()<Integer.parseInt(depthIn
				 * .getText())){ if(current<maxReached.getDepth()){ current++;
				 * System.out.println("At depth of "+current);
				 * staticLinkTextArea.append("At depth of "+current); } } }
				 * }).start();
				 */

				staticLinkTextArea
						.append("Building Complete, Searching for Static Links \n");
				return null;

			}

			protected void done() {

				new Thread(new Runnable() {
					public void run() {
						crawl.runListURL();
					}
				}).start();

				
				SwingWorker<Void, Void> worker2 = new SwingWorker<Void, Void>() {
					@Override
					protected Void doInBackground() throws Exception {
						String current = "Starting search \n";
						while (!crawl.flag().equals("done")) {
							// For console debug
							if (!current.equals(crawl.flag())) {
								/*System.out.println("in the while and flag is "
										+ crawl.flag() + " and current is "
										+ current + "\n");*/
								System.out.println("");
								current = crawl.flag();
								staticLinkTextArea.append(crawl.flag() + "\n");
								System.out.println(crawl.flag());
							}
						}
						
						
						//terrible fail safe
						while (!crawl.flag().equals("done")) {
							System.out.println("We Stuck");
						}
						
						return null;

					}

					protected void done() {
						staticLinkTextArea.append("These links have static buttons. \n");
						
						for (int i = 0; i < crawl.StaticUrls.size(); i++) {
							staticLinkTextArea.append((i + 1) + ". "
									+ crawl.StaticUrls.get(i) + " \n");
						}
					}

				};

				worker2.execute();

				// for the update
				/*
				 * while(!crawl.flag().equals("done")){
				 * System.out.println(crawl.flag());
				 * staticLinkTextArea.append(crawl.flag()); }
				 */

				/*
				 * staticLinkTextArea.append("These links have static buttons. \n"
				 * ); for(int i=0;i<crawl.StaticUrls.size();i++){
				 * staticLinkTextArea.append((i+1)
				 * +". "+crawl.StaticUrls.get(i)+" \n");
				 */
			}

		};

		worker.execute();

		
	//end of run button
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CrawlerGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CrawlerGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CrawlerGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CrawlerGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CrawlerGUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JTextField BaseIn;
	private javax.swing.JLabel BaseLabel;
	private javax.swing.JLabel DepthLabel;
	private javax.swing.JLabel URLLabel;
	private javax.swing.JTextField URLin;
	private javax.swing.JTextField depthIn;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton runButton;
	private javax.swing.JTextArea staticLinkTextArea;
	private JMenuBar menuBar;
	private JMenu mnNewMenu;
	private JMenuItem mntmHelp;
	// End of variables declaration
}
